plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
}

group = 'com.jemyeonso.app'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Additional Spring
	implementation 'org.springframework:spring-webflux'

	// Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// AWS S3
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

	// Swagger/OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Development
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// JaCoCo 설정
jacoco {
	toolVersion = "0.8.11" // Spring Boot 3.x와 Java 21 호환 버전
}

jacocoTestReport {
	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, excludes: [
						'**/dto/**',
						'**/entity/**',
						'**/controller/**',
						'**/config/**',
						'**/exception/**',
						'**/security/**',
						'**/oauth/**',
						'**/util/**',
						'**/constant/**',
						'**/Application.class',
						'**/*Config.class',
						'**/*Request.class',
						'**/*Response.class'
				])
			})
	)

	reports {
		// HTML 리포트 생성
		html.destination file("$buildDir/jacoco/report.html")
		xml.required = true
		csv.required = true
	}

	// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			includes = ['**/service/**'] // Service 패키지만 검사 대상으로 설정

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80 // Branch 커버리지 80%
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80 // Line 커버리지 80%
			}
		}
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // 테스트가 끝나면 jacocoTestReport 동작
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
